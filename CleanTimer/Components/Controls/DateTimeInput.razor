@namespace Controls

<div class="datetime">
    <input class="@inputClasses" value="@displayText"/>
    <div class="datetimeButtons">
        <Controls.Button Text="-1M"
        Variant="@UI.Controls.Button.Variant.SECONDARY"
        Size="@UI.Controls.Button.Size.XS"
        OnClick="@(() => onDateTimeChanged("month", -1))" />

        <Controls.Button Text="-1d"
        Variant="@UI.Controls.Button.Variant.SECONDARY"
        Size="@UI.Controls.Button.Size.XS"
        OnClick="@(() => onDateTimeChanged("day", -1))" />

        <Controls.Button Text="-1h"
        Variant="@UI.Controls.Button.Variant.SECONDARY"
        Size="@UI.Controls.Button.Size.XS"
        OnClick="@(() => onDateTimeChanged("hour", -1))" />

        <Controls.Button Text="-1m"
        Variant="@UI.Controls.Button.Variant.SECONDARY"
        Size="@UI.Controls.Button.Size.XS"
        OnClick="@(() => onDateTimeChanged("minute", -1))" />
    </div>

    <div class="datetimeButtons">
        <Controls.Button Text="-1M"
        Variant="@UI.Controls.Button.Variant.SECONDARY"
        Size="@UI.Controls.Button.Size.XS"
        OnClick="@(() => onDateTimeChanged("month", -1))" />

        <Controls.Button Text="+1d"
        Variant="@UI.Controls.Button.Variant.SECONDARY"
        Size="@UI.Controls.Button.Size.XS"
        OnClick="@(() => onDateTimeChanged("day", 1))" />

        <Controls.Button Text="+1h"
        Variant="@UI.Controls.Button.Variant.SECONDARY"
        Size="@UI.Controls.Button.Size.XS"
        OnClick="@(() => onDateTimeChanged("hour", 1))" />

        <Controls.Button Text="+1m"
        Variant="@UI.Controls.Button.Variant.SECONDARY"
        Size="@UI.Controls.Button.Size.XS"
        OnClick="@(() => onDateTimeChanged("minute", 1))" />
    </div>
</div>

@code {
    [Parameter]
    public DateTime? Value { get; set; }


    [Parameter]
    public EventCallback<DateTime?> ValueChanged { get; set; }

    [Parameter]
    public string Size { get; set; }

    private string displayText => string.Join(" ", [(Value?.ToString("ddd dd MMM") ?? string.Empty), (Value?.ToString("t") ?? string.Empty)]);

    private string inputClasses => string.Join(" ", new Dictionary<string, bool>()
    {
        {"input", true },
        {$"size-{Size}", Size != string.Empty},
    }.Where((kv, index) => kv.Value == true).ToDictionary(x => x.Key, x => x.Value).Keys.ToArray<string>());

    private void onDateTimeChanged(string unit, int value)
    {
        if (Value == null) return;

        if (unit == "month") ValueChanged.InvokeAsync(((DateTime)Value).AddMonths(value));
        if (unit == "day") ValueChanged.InvokeAsync(((DateTime)Value).AddDays(value));
        if (unit == "hour") ValueChanged.InvokeAsync(((DateTime)Value).AddHours(value));
        if (unit == "minute") ValueChanged.InvokeAsync(((DateTime)Value).AddMinutes(value));
    }
}
