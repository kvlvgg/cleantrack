@namespace Views

@using Node = CleanTimer.ViewModel.HouseholdChoreNode

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@if (!IsEditMode)
{
	<div class="householdDeals">
		@if (Node.isLeaf)
		{
			<Controls.Button Icon="@UI.Controls.Icon.Text.REFRESH"
							 Variant="@UI.Controls.Button.Variant.PRIMARY"
							 Size="@UI.Controls.Button.Size.XS" />
		}
		else
		{
			<Controls.Button Icon="@UI.Controls.Icon.Text.CHEVRON_RIGHT"
							 Variant="@UI.Controls.Button.Variant.SECONDARY"
							 Size="@UI.Controls.Button.Size.XS"
							 OnClick="() => isChildrenToggled = !isChildrenToggled" />
		}

		<Controls.Text Value="@Node.Name" Size="@UI.Controls.Text.Size.SM" />
		<div />
		<div class="progressbar">
			<Controls.ProgressBar Value="@Node.PercentProgress" />
		</div>
	</div>
}
else
{
	<div class="householdDeals editMode">
		@if (!Node.isLeaf)
		{
			<Controls.Button Icon="@UI.Controls.Icon.Text.CHEVRON_RIGHT"
							 Variant="@UI.Controls.Button.Variant.SECONDARY"
							 Size="@UI.Controls.Button.Size.XS"
							 OnClick="() => isChildrenToggled = !isChildrenToggled" />
		}
		else
		{
			<div />
		}

		<div class="@itemClasses" @onclick="() => toggleSelectedItem(Node.Id)">
			<div class="tag">
				<Controls.Text Value="@(Node.isLeaf ? "T" : "C")" Size="@UI.Controls.Text.Size.SM" />
			</div>

			<Controls.Text Value="@Node.Name" Size="@UI.Controls.Text.Size.MD" />
		</div>

		<div class="buttonsWrapper">
			<div class="@buttonsClasses">
				@if (isSelected)
				{
					@if (!Node.isLeaf)
					{
						<Controls.Button Icon="@UI.Controls.Icon.Text.ADD"
										 Variant="@UI.Controls.Button.Variant.SECONDARY"
										 Size="@UI.Controls.Button.Size.SM"
										 PaddingXXS
										 OnClick="() => goToAddPage(true, Node.Id)">
							<div class="tag">
								<Controls.Text Value="T" Size="@UI.Controls.Text.Size.SM" />
							</div>
						</Controls.Button>

						<Controls.Button Icon="@UI.Controls.Icon.Text.ADD"
										 Variant="@UI.Controls.Button.Variant.SECONDARY"
										 Size="@UI.Controls.Button.Size.SM"
										 PaddingXXS
										 OnClick="() => goToAddPage(false, Node.Id)">
							<div class="tag">
								<Controls.Text Value="C" Size="@UI.Controls.Text.Size.SM" />
							</div>
						</Controls.Button>
					}

					<Controls.Button Icon="@UI.Controls.Icon.Text.EDIT"
									 Variant="@UI.Controls.Button.Variant.SECONDARY"
									 Size="@UI.Controls.Button.Size.SM"
									 OnClick="goToEditPage" />
				}
			</div>
		</div>
	</div>
}



@if (Node.Children.Count > 0 && isChildrenToggled)
{
	<div class="@childrenClasses">
		@foreach (HouseholdChoreNode node in Node.Children)
		{
			<Views.HouseholdChore @key="node.Id"
								  SelectedHouseholdChoreId="SelectedHouseholdChoreId"
								  Node="@node"
								  IsEditMode="@IsEditMode"
								  SelectedHouseholdChoreIdChanged="(id) => toggleSelectedItem(id)" />
		}
	</div>
}

@code {
	[Parameter]
	public required Node Node { get; set; }

	[Parameter]
	public bool IsEditMode { get; set; }

	/* Cannot put this in ViewModel. It seems like duplicate ViewModel for each node. */
	[Parameter]
	public Guid? SelectedHouseholdChoreId { get; set; }

	[Parameter]
	public EventCallback<Guid?> SelectedHouseholdChoreIdChanged { get; set; }

	private bool isSelected => Node.Id == SelectedHouseholdChoreId;

	private string itemClasses => string.Join(" ", new Dictionary<string, bool>()
	{
		{"item", true},
		{"selected", Node.Id == SelectedHouseholdChoreId },
	}.Where((kv, index) => kv.Value == true).ToDictionary(x => x.Key, x => x.Value).Keys.ToArray<string>());

	private string buttonsClasses => string.Join(" ", new Dictionary<string, bool>()
	{
		{"buttons", true},
		{"itemSelected", Node.Id == SelectedHouseholdChoreId },
	}.Where((kv, index) => kv.Value == true).ToDictionary(x => x.Key, x => x.Value).Keys.ToArray<string>());

	private string childrenClasses => string.Join(" ", new Dictionary<string, bool>()
	{
		{"children", true},
		{"editMode", IsEditMode },
	}.Where((kv, index) => kv.Value == true).ToDictionary(x => x.Key, x => x.Value).Keys.ToArray<string>());

	private bool isChildrenToggled = false;

	private void goToAddPage(bool isLeaf, Guid parentId)
	{
		string queryParam = !isLeaf ? "Node" : "Leaf";
		Navigation.NavigateTo($"household-chore?Type={queryParam}&ParentId={parentId}");
	}

	private void goToEditPage()
	{
		Navigation.NavigateTo($"household-chore?Id={Node.Id}");
	}

	private void toggleSelectedItem(Guid? id)
	{
		if (SelectedHouseholdChoreId == id)
			SelectedHouseholdChoreIdChanged.InvokeAsync(Guid.Empty);
		else
			SelectedHouseholdChoreIdChanged.InvokeAsync(id);
	}
}
