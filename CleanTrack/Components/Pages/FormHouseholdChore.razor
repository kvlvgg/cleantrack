@using Models;
@using Localization;

@page "/chore"

@inject NavigationManager Navigation
@inject AppStateService AppState

<div id="form" class="form">
	<div class="title">
		<div style="width: 24px" />
		<Controls.H Level="3" Text="@(ViewModel.Mode == Mode.Add ? Resources.Add : Resources.Edit)" />
		<div style="width: 24px" />
		@* <Controls.Button Icon="@UI.Controls.Icon.Text.SAVE" Size="@UI.Controls.Button.Size.MD" Variant="@UI.Controls.Button.Variant.PRIMARY" Disabled="@saveButtonDisabled" OnClick="onSave" /> *@
	</div>

	<div class="fields">
		<div class="field">
			<Controls.Text Value="@Resources.LblFieldName" Size="@UI.Controls.Text.Size.SM" />
			<Controls.Input @bind-Value="@ViewModel.Form.Name" Size="@UI.Controls.Input.Size.MD" Invalid="@nameInputInvalid" />
		</div>

		@if (ViewModel.NodeType == NodeType.Leaf)
		{
			<div class="field">
				<Controls.Text Value="@Resources.lblFieldDayInterval" Size="@UI.Controls.Text.Size.SM" />
				<Controls.NumberInput @bind-Value="@ViewModel.Form.DayInterval" Size="@UI.Controls.Input.Size.MD" Invalid="@dayIntervalInvalid" />
			</div>

			<div class="field">
				<div class="datetimeLabel">
					<Controls.Text Value="@Resources.lblFieldLastDateDone" Size="@UI.Controls.Text.Size.SM" />
					<Controls.Text Value="@ViewModel.LastDateDoneDisplayText" Size="@UI.Controls.Text.Size.SM" />
				</div>

				<div class="field">
					<Controls.Text Value="@Resources.lblFieldTimeAgo" Size="@UI.Controls.Text.Size.SM" />
					<div class="timeUnits">
						<div class="field">
							<Controls.NumberInput Value="@ViewModel.LastTimeDoneAgo.Days"
												  Size="@UI.Controls.Input.Size.MD"
												  ValueChanged="@((int? e) => changeLastTimeDoneAgo("days", e))" />
						</div>

						<div class="field">
							<Controls.NumberInput Value="@ViewModel.LastTimeDoneAgo.Hours"
												  Size="@UI.Controls.Input.Size.MD"
												  ValueChanged="@((int? e) => changeLastTimeDoneAgo("hours", e))"
												  Min="0"
												  Max="23" />
						</div>

						<div class="field">
							<Controls.NumberInput Value="@ViewModel.LastTimeDoneAgo.Minutes"
												  Size="@UI.Controls.Input.Size.MD"
												  ValueChanged="@((int? e) => changeLastTimeDoneAgo("minutes", e))"
												  Min="0"
												  Max="59" />
						</div>
					</div>
				</div>
			</div>

			<div class="field">
				<Controls.ProgressBar Value="@ViewModel.ProgressPercent" />
			</div>
		}
	</div>

	<div class="saveButton">
		<Controls.Button Text="@Resources.BtnSaveText" Size="@UI.Controls.Button.Size.LG" Variant="@UI.Controls.Button.Variant.PRIMARY" Disabled="@saveButtonDisabled" OnClick="onSave" />
	</div>
</div>

@code {
	[Parameter]
	[SupplyParameterFromQuery]
	public Guid Id { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public Guid? ParentId { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public string? Type { get; set; }

	[Inject]
	IFormChoresViewModel ViewModel { get; set; }

	private bool nameInputInvalid => ViewModel.Form.Name.Length < 1;

	private bool dayIntervalInvalid => (ViewModel.Form.DayInterval ?? 0) < 1;

	private bool saveButtonDisabled => ViewModel.NodeType == NodeType.Node ? nameInputInvalid : nameInputInvalid || dayIntervalInvalid;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (Type != null) ViewModel.NodeType = Type == "Node" ? NodeType.Node : NodeType.Leaf;

		if (Id != Guid.Empty) ViewModel.LoadFormById(Id);
		else ViewModel.Create(ViewModel.NodeType, ParentId);
	}

	private void changeLastTimeDoneAgo(string timeunit, int? value)
	{
		int days = ViewModel.LastTimeDoneAgo.Days;
		int hours = ViewModel.LastTimeDoneAgo.Hours;
		int minutes = ViewModel.LastTimeDoneAgo.Minutes;
		int seconds = ViewModel.LastTimeDoneAgo.Seconds;

		if (timeunit == "days") days = value ?? 0;
		if (timeunit == "hours") hours = value ?? 0;
		if (timeunit == "minutes") minutes = value ?? 0;

		ViewModel.LastTimeDoneAgo = new TimeSpan(days, hours, minutes, seconds);
	}

	private void onSave()
	{
		if (ViewModel.Mode == Mode.Add) ViewModel.Add();
		if (ViewModel.Mode == Mode.Edit) ViewModel.Update();

		Navigation.NavigateTo("/");
	}
}
