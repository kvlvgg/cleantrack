@using Models;
@using CleanTrack.Localization;

@implements IDisposable

@page "/"

@inject NavigationManager Navigation
@inject AppStateService AppState
@inject ModalService ModalService

<div class="separator" />

<div id="edit-section" class="editSection">
	<Controls.Card Padding="@UI.Controls.Card.Padding.LG">
		<div>
			<div class="header">
				<div class="left">
					@if (!ViewModel.IsEditMode)
					{
						<Controls.Gauge Value="ViewModel.PercentProgressSummary" />
						<div />
					}
					else
					{
						<div class="buttonsWrapper">
							<div class="@addButtonsClasses">
								@if (SelectedHouseholdChoreId == Guid.Empty)
								{
									<Controls.Button Icon="@UI.Controls.Icon.Text.ADD"
													 Variant="@UI.Controls.Button.Variant.SECONDARY"
													 Size="@UI.Controls.Button.Size.MD"
													 PaddingXXS
													 OnClick="() => goToAddPage(NodeType.Node)">
										<Controls.Tag Text="S" />
									</Controls.Button>

									<Controls.Button Icon="@UI.Controls.Icon.Text.ADD"
													 Variant="@UI.Controls.Button.Variant.SECONDARY"
													 Size="@UI.Controls.Button.Size.MD"
													 PaddingXXS
													 OnClick="() => goToAddPage(NodeType.Leaf)">
										<Controls.Tag Text="T" />
									</Controls.Button>
								}
							</div>
						</div>

						<div class="buttonsWrapper">
							<div class="@dragButtonsClasses">
								@if (SelectedHouseholdChoreId != Guid.Empty)
								{
									<Controls.Button Icon="@UI.Controls.Icon.Text.STAT_1"
													 Variant="@UI.Controls.Button.Variant.SECONDARY"
													 Size="@UI.Controls.Button.Size.MD"
													 OnClick="() => ViewModel.ChangeOrder(SelectedHouseholdChoreId, -1)" />

									<Controls.Button Icon="@UI.Controls.Icon.Text.STAT_MINUS_1"
													 Variant="@UI.Controls.Button.Variant.SECONDARY"
													 Size="@UI.Controls.Button.Size.MD"
													 OnClick="() => ViewModel.ChangeOrder(SelectedHouseholdChoreId, 1)" />
								}
							</div>
						</div>
					}
				</div>

				<div class="right">
					@if (!ViewModel.IsEditMode)
					{
						<Controls.Button Icon="@UI.Controls.Icon.Text.EDIT"
										 Variant="@UI.Controls.Button.Variant.SECONDARY"
										 Size="@UI.Controls.Button.Size.MD"
										 OnClick="() => ViewModel.IsEditMode = !ViewModel.IsEditMode" />
					}
					else
					{
						@if (SelectedHouseholdChoreId == Guid.Empty)
						{
							<Controls.Button Icon="@UI.Controls.Icon.Text.CLOSE"
											 Variant="@UI.Controls.Button.Variant.SECONDARY"
											 Size="@UI.Controls.Button.Size.MD"
											 OnClick="() => ViewModel.IsEditMode = !ViewModel.IsEditMode" />
						}
						else
						{
							<Controls.Button Icon="@UI.Controls.Icon.Text.CLOSE"
											 Variant="@UI.Controls.Button.Variant.SECONDARY"
											 Size="@UI.Controls.Button.Size.MD"
											 OnClick="() => ViewModel.IsEditMode = !ViewModel.IsEditMode" />
						}
					}
				</div>
			</div>
		</div>
	</Controls.Card>
</div>

<div class="@householdChores">
	@foreach (HouseholdChoreNode node in ViewModel.tree)
	{
		<Views.HouseholdChore @key="node.Id"
							  Node="@node"
							  ToggledChores="ViewModel.ToggledChores"
							  ToggledChanged="onToggledChanged"
							  @bind-SelectedHouseholdChoreId="SelectedHouseholdChoreId"
							  IsEditMode="@ViewModel.IsEditMode"
							  onDelete="(HouseholdChoreNode node) => openDeleteConfirmationModal(node)" />
	}

	@if (ViewModel.tree.Count == 0)
	{
		<Controls.Card Padding="@UI.Controls.Card.Padding.LG" Outline>
			<div class="noItemFound">
				<Controls.Text Value="@Resources.NoItemFoundLine1" Size="@UI.Controls.Text.Size.SM" />
				<Controls.Text Value="@Resources.NoItemFoundLine2" Size="@UI.Controls.Text.Size.SM" />

				@if (!ViewModel.IsEditMode)
				{
					<div class="btnEditMode">
						<Controls.Button Icon="@UI.Controls.Icon.Text.EDIT"
										 Text="@Resources.BtnTextEditMode"
										 Variant="@UI.Controls.Button.Variant.SECONDARY"
										 Size="@UI.Controls.Button.Size.MD"
										 OnClick="() => ViewModel.IsEditMode = !ViewModel.IsEditMode" />
					</div>
				}
				else
				{
					<div class="glossary">
						<div class="glossaryItem">
							<Controls.Tag Text="S" />
							<Controls.Text Value="-" Size="@UI.Controls.Text.Size.SM" />
							<Controls.Text Value="@Resources.LblSection" Size="@UI.Controls.Text.Size.SM" />
						</div>

						<div class="glossaryItem">
							<Controls.Tag Text="T" />
							<Controls.Text Value="-" Size="@UI.Controls.Text.Size.SM" />
							<Controls.Text Value="@Resources.LblTimer" Size="@UI.Controls.Text.Size.SM" />
						</div>
					</div>
				}
			</div>
		</Controls.Card>
	}
</div>

@code {
	[Inject]
	IHouseholdChoresViewModel ViewModel { get; set; }

	private bool isSubscribed = false;

	public Guid? SelectedHouseholdChoreId { get; set; } = Guid.Empty;

	private string addButtonsClasses => string.Join(" ", new Dictionary<string, bool>()
	{
		{"buttons", true},
		{"itemSelected", SelectedHouseholdChoreId == Guid.Empty},
	}.Where((kv, index) => kv.Value == true).ToDictionary(x => x.Key, x => x.Value).Keys.ToArray<string>());

	private string dragButtonsClasses => string.Join(" ", new Dictionary<string, bool>()
	{
		{"buttons", true},
		{"itemSelected", SelectedHouseholdChoreId != Guid.Empty},
	}.Where((kv, index) => kv.Value == true).ToDictionary(x => x.Key, x => x.Value).Keys.ToArray<string>());

	private string householdChores => string.Join(" ", new Dictionary<string, bool>()
	{
		{"householdChores", true},
		{"readMode", !ViewModel.IsEditMode},
	}.Where((kv, index) => kv.Value == true).ToDictionary(x => x.Key, x => x.Value).Keys.ToArray<string>());

	protected override void OnInitialized()
	{
		ViewModel.Load();

		if (!isSubscribed)
		{
			AppState.StateChanged += Refresh;
			isSubscribed = true;
		}
	}

	private void onToggledChanged(Guid id)
	{
		if (ViewModel.ToggledChores.Contains(id)) ViewModel.ToggledChores.Remove(id);
		else ViewModel.ToggledChores.Add(id);
	}

	private void Refresh()
	{
		StateHasChanged();
	}

	private void goToAddPage(NodeType nodeType)
	{
		string queryParam = nodeType == NodeType.Node ? "Node" : "Leaf";
		Navigation.NavigateTo($"household-chore?Type={queryParam}");
	}

	private void openDeleteConfirmationModal(HouseholdChoreNode node)
	{
		string title = node.isLeaf ? Resources.ConfirmModalDeleteTimerTitle : Resources.ConfirmModalDeleteSectionTitle;

		string safeNodeName = System.Net.WebUtility.HtmlEncode(node.Name);
		string message = string.Format(node.isLeaf ? Resources.ConfirmModalDeleteTimerMessage : Resources.ConfirmModalDeleteSectionMessage, safeNodeName);

		ModalService.Confirm(title, message, Resources.BtnDeleteText, Resources.BtnCloseText, () => { onDelete(node.Id); });
	}

	private void onDelete(Guid id)
	{
		ViewModel.Delete(id);
		if (SelectedHouseholdChoreId == id) SelectedHouseholdChoreId = Guid.Empty;

		StateHasChanged();
	}

	public void Dispose()
	{
		AppState.StateChanged -= Refresh;
	}
}