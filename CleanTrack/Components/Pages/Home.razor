@using Models;
@using CleanTrack.Localization;

@implements IDisposable

@page "/"

@inject NavigationManager Navigation
@inject AppStateService AppState
@inject ModalService ModalService

<div class="separator" />

@* id="chores-panel" используется в onscroll.js *@
<div id="summary-panel" class="choresPanel">
	@if (!ViewModel.IsEditMode)
	{
		<Views.Home.SummaryPanel @bind-IsEditMode="ViewModel.IsEditMode" PercentProgressSummary="ViewModel.PercentProgressSummary" />
	}
	else
	{
		<Views.Home.EditPanel @bind-IsEditMode="ViewModel.IsEditMode"
							  IsChoreSelected=@(ViewModel.SelectedChoreId != Guid.Empty)
							  OnChangeOrderClick="(int order) => ViewModel.ChangeOrder(ViewModel.SelectedChoreId, order)"
							  OnNavigateToAddPageClick="(NodeType type) => goToAddPage(type)" />
	}
</div>

<div class="@choresClasses">
	@foreach (ChoreNode node in ViewModel.tree)
	{
		<Views.Chores.Item @key="node.Id" Node="node" IsEditMode="ViewModel.IsEditMode" ToggledChores="ViewModel.ToggledChores">
			<ViewTemplate Context="n">
				<Views.Chores.Mode.View.Item Node="n" ToggledChanged="onToggledChanged" />
			</ViewTemplate>

			<EditTemplate Context="n">
				<Views.Chores.Mode.Edit.Item Node="n" ToggledChanged="onToggledChanged"
											 @bind-SelectedChoreId="ViewModel.SelectedChoreId"
											 onAdd="goToAddPage"
											 onEdit="goToEditPage"
											 onDelete="openDeleteConfirmationModal" />
			</EditTemplate>
		</Views.Chores.Item>
	}

	@if (ViewModel.tree.Count == 0)
	{
		<Views.Home.NoChoresPanel @bind-IsEditMode="ViewModel.IsEditMode" />
	}
</div>

@code {
	[Inject]
	IChoresViewModel ViewModel { get; set; }

	private bool isSubscribed = false;

	private string choresClasses => string.Join(" ", new Dictionary<string, bool>()
	{
		{"chores", true},
		{"readMode", !ViewModel.IsEditMode},
	}.Where((kv, index) => kv.Value == true).ToDictionary(x => x.Key, x => x.Value).Keys.ToArray<string>());

	protected override void OnInitialized()
	{
		ViewModel.Load();

		if (!isSubscribed)
		{
			AppState.StateChanged += Refresh;
			isSubscribed = true;
		}
	}

	private void onToggledChanged(Guid id)
	{
		if (ViewModel.ToggledChores.Contains(id)) ViewModel.ToggledChores.Remove(id);
		else ViewModel.ToggledChores.Add(id);
	}

	private void Refresh()
	{
		StateHasChanged();
	}

	private void goToAddPage(NodeType nodeType)
	{
		string queryParam = nodeType == NodeType.Node ? "Node" : "Leaf";
		Navigation.NavigateTo($"chore?Type={queryParam}");
	}

	private void goToAddPage((bool, Guid) ctx)
	{
		bool isLeaf = ctx.Item1;
		Guid parentId = ctx.Item2;

		string queryParam = !isLeaf ? "Node" : "Leaf";
		Navigation.NavigateTo($"chore?Type={queryParam}&ParentId={parentId}");
	}

	private void goToEditPage(ChoreNode node)
	{
		Navigation.NavigateTo($"chore?Id={node.Id}");
	}


	private void openDeleteConfirmationModal(ChoreNode node)
	{
		string title = node.isLeaf ? Resources.ConfirmModalDeleteTimerTitle : Resources.ConfirmModalDeleteSectionTitle;

		string safeNodeName = System.Net.WebUtility.HtmlEncode(node.Name);
		string message = string.Format(node.isLeaf ? Resources.ConfirmModalDeleteTimerMessage : Resources.ConfirmModalDeleteSectionMessage, safeNodeName);

		ModalService.ConfirmDelete(title, message, Resources.BtnDeleteText, Resources.BtnCloseText, () => { onDelete(node.Id); });
	}

	private void onDelete(Guid id)
	{
		ViewModel.Delete(id);
		if (ViewModel.SelectedChoreId == id) ViewModel.SelectedChoreId = Guid.Empty;

		StateHasChanged();
	}

	public void Dispose()
	{
		AppState.StateChanged -= Refresh;
	}
}