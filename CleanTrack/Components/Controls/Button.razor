@namespace Controls

<button class="@buttonClasses @buttonPaymentServiceClass" disabled="@Disabled" onclick="@OnClick">
	@if (Icon != null)
	{
		<Controls.Icon Text="@Icon" />
		@if (Text != string.Empty || ChildContent != null)
		{
			<div style="width: 4px;" />
		}
	}

	@if (Text != null)
	{
		@Text
	}

	@if (ChildContent != null)
	{
		@ChildContent
	}
</button>

@code {
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter]
	public string Text { get; set; } = string.Empty;

	[Parameter]
	public string Variant { get; set; } = string.Empty;

	[Parameter]
	public string Size { get; set; } = string.Empty;

	[Parameter]
	public string Icon { get; set; } = string.Empty;

	[Parameter]
	public bool Link { get; set; }

	[Parameter]
	public string Target { get; set; } = string.Empty;

	[Parameter]
	public bool Outline { get; set; }

	[Parameter]
	public bool W100 { get; set; }

	[Parameter]
	public bool PaddingXXS { get; set; }

	[Parameter]
	public bool Disabled { get; set; } = false;

	[Parameter]
	public EventCallback OnClick { get; set; }

	[Parameter]
	public string PaymentService { get; set; } = string.Empty;

	private bool isIconOnly => Text == string.Empty && ChildContent == null && Icon != string.Empty;

	private string buttonClasses => string.Join(" ", new Dictionary<string, bool>()
	{
		{"button", true },
		{$"{Variant}", Variant != string.Empty},
		{$"size-{Size}", Size != string.Empty},
		{"square", isIconOnly},
		{"outline", Outline},
		{"w100", W100},
		{"p-xxs", PaddingXXS},
	}.Where((kv, index) => kv.Value == true).ToDictionary(x => x.Key, x => x.Value).Keys.ToArray<string>());

	private string buttonPaymentServiceClass => PaymentService != string.Empty ? PaymentService : string.Empty;
}
