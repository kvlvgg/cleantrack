@namespace Views.Chores

@if (!IsEditMode)
{
	@ViewTemplate?.Invoke(Node)
}
else
{
	@EditTemplate?.Invoke(Node)
}

@if (Node.Children.Count > 0 && isChildrenToggled)
{
	<div class="@childrenClasses">
		@foreach (ChoreNode node in Node.Children)
		{
			<Views.Chores.Item @key="node.Id"
							   Node="node"
							   IsEditMode="IsEditMode"
							   ToggledChores="ToggledChores"
							   ViewTemplate="ViewTemplate"
							   EditTemplate="EditTemplate" />
		}
	</div>
}

@code {
	[Parameter] public RenderFragment<ChoreNode>? ViewTemplate { get; set; }
	[Parameter] public RenderFragment<ChoreNode>? EditTemplate { get; set; }

	[Parameter]
	public required ChoreNode Node { get; set; }

	[Parameter]
	public bool IsEditMode { get; set; }

	[Parameter]
	public IList<Guid> ToggledChores { get; set; } = new List<Guid>();

	private bool isChildrenToggled => ToggledChores.Contains(Node.Id);

	private string childrenClasses => string.Join(" ", new Dictionary<string, bool>()
	{
		{"children", true},
		{"editMode", IsEditMode },
	}.Where((kv, index) => kv.Value == true).ToDictionary(x => x.Key, x => x.Value).Keys.ToArray<string>());
}
